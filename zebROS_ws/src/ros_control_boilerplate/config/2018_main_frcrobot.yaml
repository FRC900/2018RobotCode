# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 50
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: lift, type: can_talon_srx, can_id: 41}
       - {name: lift_follower1, type: can_talon_srx, can_id: 42}
       - {name: lift_follower2, type: can_talon_srx, can_id: 43}
       - {name: pivot, type: can_talon_srx, can_id: 51}
       - {name: intake1, type: can_talon_srx, can_id: 31}
       - {name: intake1, type: can_talon_srx, can_id: 31}
       - {name: clamp, type: solenoid, pcm: 0, id: 1} #correct
       - {name: intake_spring_soft, type: solenoid, pcm: 0, id: 6} #3+6 soft
       - {name: intake_spring_hard, type: double_solenoid, pcm: 0, forward_id: 3, reverse_id: 7} 
       - {name: intake_up, type: double_solenoid, pcm: 0, forward_id: 4, reverse_id: 0} 
       - {name: shift, type: double_solenoid, pcm: 0, forward_id: 5, reverse_id: 2} #doesn't work as far as I can tell
       - {name: end_game_deploy, type: solenoid, pcm: 1, id: 7}
       - {name: clamp_line_break, type: digital_input, dio_channel: 0, invert: true}
       - {name: intake_line_break, type: digital_input, dio_channel: 1, invert: true}
       - {name: fl_drive, type: can_talon_srx, can_id: 21}
       - {name: fl_angle, type: can_talon_srx, can_id: 11}
       - {name: fr_drive, type: can_talon_srx, can_id: 22}
       - {name: fr_angle, type: can_talon_srx, can_id: 12}
       - {name: br_drive, type: can_talon_srx, can_id: 24}
       - {name: br_angle, type: can_talon_srx, can_id: 14}
       - {name: bl_drive, type: can_talon_srx, can_id: 23}
       - {name: bl_angle, type: can_talon_srx, can_id: 13}
       - {name: navx_mxp, type: navX, frame_id: navx, id: 0}
       - {name: analog_pressure_sensor, type: analog_input, analog_channel: 0, analog_a: .0633897, analog_b: -24.9}
       - {name: compressor1, type: compressor, pcm_id: 0}
       - {name: joystick_rumble, type: rumble, rumble_port: 0}
#TODO: fix ids for pneumatics   
#TODO: add "spring" pneumatics and some sensors

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 30

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 30

intake_up_controller:
    type: position_controllers/JointPositionController
    joint: intake_up

shift_controller:
    type: position_controllers/JointPositionController
    joint: shift

clamp_controller:
    type: position_controllers/JointPositionController
    joint: clamp

intake_spring_soft_controller:
    type: position_controllers/JointPositionController
    joint: intake_spring_soft

intake_spring_hard_controller:
    type: position_controllers/JointPositionController
    joint: intake_spring_hard

end_game_deploy_controller:
    type: position_controllers/JointPositionController
    joint: end_game_deploy

imu_sensor_controller:
   type:         imu_sensor_controller/ImuSensorController
   publish_rate: 20

navx_controller:
   type: position_controllers/JointPositionController
   joint: navx_mxp

pdp_state_controller:
   type:         pdp_state_controller/PDPStateController
   publish_rate: 20

compressor_controller:
   type: position_controllers/JointPositionController
   joint: compressor1

rumble_controller:
    type: position_controllers/JointPositionController
    joint: joystick_rumble

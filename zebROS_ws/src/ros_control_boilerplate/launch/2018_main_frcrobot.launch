<?xml version="1.0"?>
<launch>

	<!-- GDB functionality -->
	<arg name="debug" default="false" />
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

	<arg name="hw_or_sim" default="hw" />
	<arg name="bot id" default="0" />

	<!-- Load example URDF 
	<param name="robot_description" command="$(find xacro)/xacro - -inorder '$(find ros_control_boilerplate)/urdf/base_trajectory.xacro'" />
	-->

	<group ns="frcrobot">

		<!-- Load controller settings -->
		<rosparam file="$(find ros_control_boilerplate)/config/2018_main_frcrobot.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/talon_swerve_offsets_new_1.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/elevator.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/elevator_offsets1.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/2018_swerve_drive.yaml" command="load"/>
		<rosparam file="$(find ros_control_boilerplate)/config/robot_code_ready_controller.yaml" command="load"/>
		<rosparam file="$(find teleop_joystick_control)/config/JoystickSubscriber.yaml" command="load"/>
        <rosparam file="$(find teleop_joystick_control)/config/teleopJoystickCommands.yaml" command="load"/>
		<rosparam file="$(find compressor_control_node)/config/regulate_compressor.yaml" command="load"/>
        <rosparam file="$(find behaviors)/config/autoInterpreterClient.yaml" command="load"/>

		<!-- Load hardware interface -->
		<node name="frcrobot_hardware_interface" pkg="ros_control_boilerplate" type="frcrobot_$(arg hw_or_sim)_main"
			output="screen" launch-prefix="$(arg launch_prefix)">
		</node>

		<!-- Load controller manager -->
		<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
			output="screen" args="spawn joint_state_controller talon_state_controller intake_up_controller shift_controller clamp_controller intake_spring_soft_controller intake_spring_hard_controller end_game_deploy_controller imu_sensor_controller navx_controller pdp_state_controller compressor_controller elevator_controller swerve_drive_controller rumble_controller robot_code_ready_controller"/>

        <!-- launch joystick subscriber-->
		
		<node name="joystickSubscriber" pkg="teleop_joystick_control" type="joystickSubscriber"
			output="screen" >
		</node>
		<node name="teleopJoystickCommands" pkg="teleop_joystick_control" type="teleopJoystickCommands"
			output="screen" >
			<remap from="/frcrobot/cmd_vel" to="/frcrobot/swerve_drive_controller/cmd_vel"/> 
		</node>
        	
		<node name="autoInterpreterClient" pkg="behaviors" type="autoInterpreterClient" output="screen" >
        	</node>

        	<node name="autoInterpreterServerLift" pkg="behaviors" type="autoInterpreterServerLift" output="screen" >
		</node>

        	<node name="autoInterpreterServerIntake" pkg="behaviors" type="autoInterpreterServerIntake" output="screen" >
		</node>

        	<node name="autoInterpreterServer" pkg="behaviors" type="autoInterpreterServer" output="screen" >
		</node>
        	

        	
        	
		<node name="regulate_compressor" pkg="compressor_control_node" type="regulate_compressor" output="screen" >
        	</node>
		<node name="point_gen" pkg="swerve_point_generator" type="point_gen" output="screen" >
		</node>

		<!-- <node name="debug_cmd_vel" pkg="teleop_joystick_control" type="debug_cmd_vel" output="screen" /> -->
		

		<!-- Convert joint states to /tf tranforms -->
		<!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/-->
	</group>

</launch>
